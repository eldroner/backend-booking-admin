Lo más simple (recomendado)

Trata al backend como dominio aparte y apunta directamente a su /api. Así evitas el problema del index.html del frontend.

Cambia tu environment.prod.ts a:

export const environment = {
  production: true,
  apiBase: 'https://reservas-api.pixelnova.es/api',
  emailjs: {
    serviceId: 'service_8ye06ka',
    templateId: 'template_lhxsfc9',
    userId: 'pkQl3ciKlncnQMXk3'
  }
};


En tus servicios Angular, usa siempre environment.apiBase y NO pongas otro /api extra:

// subscription.service.ts (ejemplo)
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment } from '../environments/environment.prod'; // o el path que uses

@Injectable({ providedIn: 'root' })
export class SubscriptionService {
  private base = environment.apiBase;

  constructor(private http: HttpClient) {}

  getDetails() {
    return this.http.get(`${this.base}/subscription/details`);
  }
}


Revisa que no tengas llamadas “huérfanas” tipo this.http.get('/api/...').
Haz un buscar-en-todo el proyecto por '/api/ y cámbialas a ${environment.apiBase}/....

(Si tienes entorno dev) alinea environment.ts para que el código sea igual en dev y prod:

export const environment = {
  production: false,
  apiBase: 'http://localhost:3000/api'
};


Backend (CORS) — si tu frontend está en otro dominio:

import cors from 'cors';
app.use(cors({
  origin: [
    'https://TU-FRONTEND.com',          // tu dominio real del frontend
    'https://TU-FRONTEND.onrender.com', // si lo usas
    'http://localhost:4200'
  ],
  credentials: true
}));